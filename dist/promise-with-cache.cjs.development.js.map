{"version":3,"file":"promise-with-cache.cjs.development.js","sources":["../src/tools.ts","../src/index.ts"],"sourcesContent":["/**\n * 生成uuid\n */\nexport const uuidGenerate = () => {\n  let timestamp = new Date().getTime();\n  let perforNow =\n    (typeof performance !== 'undefined' &&\n      performance.now &&\n      performance.now() * 1000) ||\n    0;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    let random = Math.random() * 16;\n    if (timestamp > 0) {\n      random = (timestamp + random) % 16 | 0;\n      timestamp = Math.floor(timestamp / 16);\n    } else {\n      random = (perforNow + random) % 16 | 0;\n      perforNow = Math.floor(perforNow / 16);\n    }\n    return (c === 'x' ? random : (random & 0x3) | 0x8).toString(16);\n  });\n};\n","import { uuidGenerate } from './tools';\ninterface RequestCallback {\n  onSuccess: (data: any) => void;\n  onError: (error: any) => void;\n}\n\n// 存放等待状态的请求回调\nconst callbackMap = new Map<string, RequestCallback[]>();\n\n// 异步任务状态缓存\nconst statusMap = new Map<string, 'pending' | 'complete'>();\n\n// 实际数据缓存\nconst cacheMap = new Map<string, Record<string, any>>();\n\nclass CachePromise<T = any> {\n  private promiseFunc: () => Promise<T>;\n\n  private cacheKey: string;\n\n  private generateCacheKey() {\n    return uuidGenerate();\n  }\n\n  /**\n   * 静态方法-指定key清空缓存，如果不传则全部清空\n   */\n  static clearCache(cacheKey?: string) {\n    if (cacheKey == void 0) {\n      callbackMap.clear();\n      statusMap.clear();\n      cacheMap.clear();\n    } else {\n      callbackMap.delete(cacheKey);\n      statusMap.delete(cacheKey);\n      cacheMap.delete(cacheKey);\n    }\n  }\n\n  /**\n   * 并发异步任务缓存\n   *\n   * @param promiseFunc 返回值是个promise的函数\n   * @param cacheKey 缓存key，如果不指定静态cacheKey的话，那只能实例化一次（缓存key会在实例化生成）\n   */\n  constructor(promiseFunc: () => Promise<T>, cacheKey?: string) {\n    this.promiseFunc = promiseFunc;\n    this.cacheKey = cacheKey ?? this.generateCacheKey();\n  }\n\n  /**\n   * 调用get方法，执行异步任务，缓存存在时会取缓存，如果有并发任务时，会等待上一个并发任务结束再取缓存\n   */\n  get = (): Promise<T> => {\n    if (!this.cacheKey || typeof this.promiseFunc !== 'function') {\n      const paramsError = new Error('cacheKey or promiseFunc can not be empty');\n      if (__DEV__) {\n        console.error(paramsError);\n      }\n      return Promise.reject(paramsError);\n    }\n    if (statusMap.has(this.cacheKey)) {\n      const currentStatus = statusMap.get(this.cacheKey);\n\n      // 判断当前的接口缓存状态，如果是 complete ，则代表缓存完成\n      if (currentStatus === 'complete') {\n        return Promise.resolve(cacheMap.get(this.cacheKey) as T);\n      }\n\n      // 如果是 pending ，则代表正在请求中，这里放入回调函数\n      if (currentStatus === 'pending') {\n        return new Promise((resolve, reject) => {\n          if (callbackMap.has(this.cacheKey)) {\n            callbackMap.get(this.cacheKey)!.push({\n              onSuccess: resolve,\n              onError: reject\n            });\n          } else {\n            callbackMap.set(this.cacheKey, [\n              {\n                onSuccess: resolve,\n                onError: reject\n              }\n            ]);\n          }\n        });\n      }\n    }\n\n    statusMap.set(this.cacheKey, 'pending');\n\n    return this.promiseFunc().then(\n      res => {\n        statusMap.set(this.cacheKey, 'complete');\n        cacheMap.set(this.cacheKey, res as any);\n        // 触发resolve的回调函数\n        if (callbackMap.has(this.cacheKey)) {\n          callbackMap.get(this.cacheKey)!.forEach(callback => {\n            callback.onSuccess(res);\n          });\n          // 调用完成之后清掉，用不到了\n          callbackMap.delete(this.cacheKey);\n        }\n        return res;\n      },\n      error => {\n        // 不成功的情况下删掉 statusMap 中的状态，能让下次请求重新请求\n        statusMap.delete(this.cacheKey);\n        // 这里触发reject的回调函数\n        if (callbackMap.has(this.cacheKey)) {\n          callbackMap.get(this.cacheKey)!.forEach(callback => {\n            callback.onError(error);\n          });\n          // 调用完成之后也清掉\n          callbackMap.delete(this.cacheKey);\n        }\n        // 返回 Promise.reject(error)，才能被catch捕捉到\n        return Promise.reject(error);\n      }\n    );\n  };\n\n  /**\n   * 获取缓存key\n   */\n  getCacheKey = () => {\n    return this.cacheKey;\n  };\n\n  /**\n   * 清空缓存\n   */\n  clearCache = () => {\n    if (!this.cacheKey) return;\n    callbackMap.delete(this.cacheKey);\n    statusMap.delete(this.cacheKey);\n    cacheMap.delete(this.cacheKey);\n  };\n\n  /**\n   * 手动强制执行异步任务-刷新缓存\n   */\n  forceUpdate = (): Promise<T> => {\n    this.clearCache();\n    return this.get();\n  };\n}\n\nexport default CachePromise;\n"],"names":["uuidGenerate","timestamp","Date","getTime","perforNow","performance","now","replace","c","random","Math","floor","toString","callbackMap","Map","statusMap","cacheMap","CachePromise","promiseFunc","cacheKey","_this","paramsError","Error","console","error","Promise","reject","has","currentStatus","get","resolve","push","onSuccess","onError","set","then","res","forEach","callback","clearCache","generateCacheKey","_proto","prototype","clear"],"mappings":";;;;AAAA;;;AAGO,IAAMA,YAAY,GAAG,SAAfA,YAAYA;EACvB,IAAIC,SAAS,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;EACpC,IAAIC,SAAS,GACV,OAAOC,WAAW,KAAK,WAAW,IACjCA,WAAW,CAACC,GAAG,IACfD,WAAW,CAACC,GAAG,EAAE,GAAG,IAAI,IAC1B,CAAC;EACH,OAAO,sCAAsC,CAACC,OAAO,CAAC,OAAO,EAAE,UAAAC,CAAC;IAC9D,IAAIC,MAAM,GAAGC,IAAI,CAACD,MAAM,EAAE,GAAG,EAAE;IAC/B,IAAIR,SAAS,GAAG,CAAC,EAAE;MACjBQ,MAAM,GAAG,CAACR,SAAS,GAAGQ,MAAM,IAAI,EAAE,GAAG,CAAC;MACtCR,SAAS,GAAGS,IAAI,CAACC,KAAK,CAACV,SAAS,GAAG,EAAE,CAAC;KACvC,MAAM;MACLQ,MAAM,GAAG,CAACL,SAAS,GAAGK,MAAM,IAAI,EAAE,GAAG,CAAC;MACtCL,SAAS,GAAGM,IAAI,CAACC,KAAK,CAACP,SAAS,GAAG,EAAE,CAAC;;IAExC,OAAO,CAACI,CAAC,KAAK,GAAG,GAAGC,MAAM,GAAIA,MAAM,GAAG,GAAG,GAAI,GAAG,EAAEG,QAAQ,CAAC,EAAE,CAAC;GAChE,CAAC;AACJ,CAAC;;ACfD;AACA,IAAMC,WAAW,gBAAG,IAAIC,GAAG,EAA6B;AAExD;AACA,IAAMC,SAAS,gBAAG,IAAID,GAAG,EAAkC;AAE3D;AACA,IAAME,QAAQ,gBAAG,IAAIF,GAAG,EAA+B;AAAC,IAElDG,YAAY;;;;;;;EA8BhB,SAAAA,aAAYC,WAA6B,EAAEC,QAAiB;;;;;IAQ5D,QAAG,GAAG;MACJ,IAAI,CAACC,KAAI,CAACD,QAAQ,IAAI,OAAOC,KAAI,CAACF,WAAW,KAAK,UAAU,EAAE;QAC5D,IAAMG,WAAW,GAAG,IAAIC,KAAK,CAAC,0CAA0C,CAAC;QACzE,AAAa;UACXC,OAAO,CAACC,KAAK,CAACH,WAAW,CAAC;;QAE5B,OAAOI,OAAO,CAACC,MAAM,CAACL,WAAW,CAAC;;MAEpC,IAAIN,SAAS,CAACY,GAAG,CAACP,KAAI,CAACD,QAAQ,CAAC,EAAE;QAChC,IAAMS,aAAa,GAAGb,SAAS,CAACc,GAAG,CAACT,KAAI,CAACD,QAAQ,CAAC;;QAGlD,IAAIS,aAAa,KAAK,UAAU,EAAE;UAChC,OAAOH,OAAO,CAACK,OAAO,CAACd,QAAQ,CAACa,GAAG,CAACT,KAAI,CAACD,QAAQ,CAAM,CAAC;;;QAI1D,IAAIS,aAAa,KAAK,SAAS,EAAE;UAC/B,OAAO,IAAIH,OAAO,CAAC,UAACK,OAAO,EAAEJ,MAAM;YACjC,IAAIb,WAAW,CAACc,GAAG,CAACP,KAAI,CAACD,QAAQ,CAAC,EAAE;cAClCN,WAAW,CAACgB,GAAG,CAACT,KAAI,CAACD,QAAQ,CAAE,CAACY,IAAI,CAAC;gBACnCC,SAAS,EAAEF,OAAO;gBAClBG,OAAO,EAAEP;eACV,CAAC;aACH,MAAM;cACLb,WAAW,CAACqB,GAAG,CAACd,KAAI,CAACD,QAAQ,EAAE,CAC7B;gBACEa,SAAS,EAAEF,OAAO;gBAClBG,OAAO,EAAEP;eACV,CACF,CAAC;;WAEL,CAAC;;;MAINX,SAAS,CAACmB,GAAG,CAACd,KAAI,CAACD,QAAQ,EAAE,SAAS,CAAC;MAEvC,OAAOC,KAAI,CAACF,WAAW,EAAE,CAACiB,IAAI,CAC5B,UAAAC,GAAG;QACDrB,SAAS,CAACmB,GAAG,CAACd,KAAI,CAACD,QAAQ,EAAE,UAAU,CAAC;QACxCH,QAAQ,CAACkB,GAAG,CAACd,KAAI,CAACD,QAAQ,EAAEiB,GAAU,CAAC;;QAEvC,IAAIvB,WAAW,CAACc,GAAG,CAACP,KAAI,CAACD,QAAQ,CAAC,EAAE;UAClCN,WAAW,CAACgB,GAAG,CAACT,KAAI,CAACD,QAAQ,CAAE,CAACkB,OAAO,CAAC,UAAAC,QAAQ;YAC9CA,QAAQ,CAACN,SAAS,CAACI,GAAG,CAAC;WACxB,CAAC;;UAEFvB,WAAW,UAAO,CAACO,KAAI,CAACD,QAAQ,CAAC;;QAEnC,OAAOiB,GAAG;OACX,EACD,UAAAZ,KAAK;;QAEHT,SAAS,UAAO,CAACK,KAAI,CAACD,QAAQ,CAAC;;QAE/B,IAAIN,WAAW,CAACc,GAAG,CAACP,KAAI,CAACD,QAAQ,CAAC,EAAE;UAClCN,WAAW,CAACgB,GAAG,CAACT,KAAI,CAACD,QAAQ,CAAE,CAACkB,OAAO,CAAC,UAAAC,QAAQ;YAC9CA,QAAQ,CAACL,OAAO,CAACT,KAAK,CAAC;WACxB,CAAC;;UAEFX,WAAW,UAAO,CAACO,KAAI,CAACD,QAAQ,CAAC;;;QAGnC,OAAOM,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;OAC7B,CACF;KACF;;;;IAKD,gBAAW,GAAG;MACZ,OAAOJ,KAAI,CAACD,QAAQ;KACrB;;;;IAKD,eAAU,GAAG;MACX,IAAI,CAACC,KAAI,CAACD,QAAQ,EAAE;MACpBN,WAAW,UAAO,CAACO,KAAI,CAACD,QAAQ,CAAC;MACjCJ,SAAS,UAAO,CAACK,KAAI,CAACD,QAAQ,CAAC;MAC/BH,QAAQ,UAAO,CAACI,KAAI,CAACD,QAAQ,CAAC;KAC/B;;;;IAKD,gBAAW,GAAG;MACZC,KAAI,CAACmB,UAAU,EAAE;MACjB,OAAOnB,KAAI,CAACS,GAAG,EAAE;KAClB;IAnGC,IAAI,CAACX,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,QAAQ,GAAGA,QAAQ,WAARA,QAAQ,GAAI,IAAI,CAACqB,gBAAgB,EAAE;;EACpD,IAAAC,MAAA,GAAAxB,YAAA,CAAAyB,SAAA;EAAAD,MAAA,CA5BOD,gBAAgB,GAAhB,SAAAA;IACN,OAAOxC,YAAY,EAAE;;;;;EAGvBiB,YAAA,CAGOsB,UAAU,GAAjB,SAAAA,WAAkBpB,QAAiB;IACjC,IAAIA,QAAQ,IAAI,KAAK,CAAC,EAAE;MACtBN,WAAW,CAAC8B,KAAK,EAAE;MACnB5B,SAAS,CAAC4B,KAAK,EAAE;MACjB3B,QAAQ,CAAC2B,KAAK,EAAE;KACjB,MAAM;MACL9B,WAAW,UAAO,CAACM,QAAQ,CAAC;MAC5BJ,SAAS,UAAO,CAACI,QAAQ,CAAC;MAC1BH,QAAQ,UAAO,CAACG,QAAQ,CAAC;;GAE5B;EAAA,OAAAF,YAAA;AAAA;;;;"}